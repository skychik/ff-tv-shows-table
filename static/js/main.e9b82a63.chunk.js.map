{"version":3,"sources":["actions/index.js","reducers/index.js","containers/Table.js","containers/App.js","initState.js","index.js"],"names":["TRAKT_CLIENT_KEY","FANART_PERSONAL_KEY","FANART_PROJECT_KEY","REQUEST_SHOWS","RECEIVE_SHOWS","REQUEST_POSTER_INFO","RECEIVE_POSTER_INFO","fetchShows","dispatch","requestShows","options","headers","Content-Type","trakt-api-version","trakt-api-key","fetch","then","response","json","receiveShows","map","info","fetchPosterInfo","ids","tvdb","type","shows","posterId","console","log","requestPosterInfo","url","receivePosterInfo","rootReducer","combineReducers","state","arguments","length","undefined","action","infoFetched","id","show","title","year","Object","objectSpread","posterUrl","clearlogo","Array","hdtvlogo","Table","this","props","showsElems","react_default","a","createElement","key","src","alt","className","React","Component","connect","bindActionCreators","actionCreators","App","containers_Table","initState","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","render","es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.e9b82a63.chunk.js","sourcesContent":["import fetch from 'cross-fetch';\n\nconst TRAKT_CLIENT_KEY = \"1098aa9283a45930885916b98e046d43cd7301e4de4198c5e624aa39b5cd6972\";\nconst FANART_PERSONAL_KEY = \"313966685b1712ca5f9c4c15427da38d\";\nconst FANART_PROJECT_KEY = \"4a2226e35da3b653ed9d980ae3efb5f8\";\nexport const REQUEST_SHOWS = \"REQUEST_SHOWS\";\nexport const RECEIVE_SHOWS = \"RECEIVE_SHOWS\";\nexport const REQUEST_POSTER_INFO = \"REQUEST_POSTER_INFO\";\nexport const RECEIVE_POSTER_INFO = \"RECEIVE_POSTER_INFO\";\n\n\n// Getting all shows info\n\nexport function fetchShows() {\n  return dispatch => {\n    dispatch(requestShows());\n\n    const options = {\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"trakt-api-version\": '2',\n        \"trakt-api-key\": TRAKT_CLIENT_KEY\n      }\n    };\n    return fetch(\"https://api.trakt.tv/shows/popular\", options)\n      .then(response => response.json())\n      .then(json => {\n        dispatch(receiveShows(json));\n        json.map(info => dispatch(fetchPosterInfo(info.ids.tvdb)));\n      });\n  }\n}\n\nexport function requestShows() {\n  return {\n    type: REQUEST_SHOWS\n  }\n}\n\nexport function receiveShows(shows) {\n  return {\n    type: RECEIVE_SHOWS,\n    shows: shows,\n  }\n}\n\n\n// Getting poster info\n\nexport function fetchPosterInfo(posterId) {\n  console.log(\"sd\");\n  return dispatch => {\n    dispatch(requestPosterInfo(posterId));\n\n    const url = \"https://webservice.fanart.tv/v3/tv/\" + posterId + \"?api_key=\" + FANART_PROJECT_KEY +\n      \"&client_key=\" + FANART_PERSONAL_KEY;\n    const options = {\n      headers: {\n        // \"api-key\": FANART_PROJECT_KEY,\n        // \"client-key\": FANART_PERSONAL_KEY\n      }\n    };\n    return fetch(url, options)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosterInfo(json, posterId)));\n  }\n}\n\nexport function requestPosterInfo(posterId) {\n  return {\n    type: REQUEST_POSTER_INFO,\n    posterId: posterId\n  }\n}\n\nexport function receivePosterInfo(info, posterId) {\n  return {\n    type: RECEIVE_POSTER_INFO,\n    info: info,\n    posterId: posterId\n  }\n}\n","import { combineReducers } from 'redux'\nimport {RECEIVE_POSTER_INFO, RECEIVE_SHOWS, REQUEST_SHOWS} from \"../actions\";\n\nexport function showsReducer(state = {}, action) {\n  switch (action.type) {\n    case REQUEST_SHOWS:\n      return {\n        info: [],\n        infoFetched: false\n      };\n    case RECEIVE_SHOWS:\n      console.log(action.shows);\n      let id = 0;\n      return {\n        info: action.shows.map(show => ({\n          id: id++,\n          title: show.title,\n          year: show.year,\n          posterId: show.ids.tvdb\n        })),\n        infoFetched: true\n      };\n    case RECEIVE_POSTER_INFO:\n      // TODO: normal algo\n      return {\n        ...state,\n        info: state.info.map(show =>\n            show.posterId === action.posterId ? {...show, posterUrl: getPosterUrlFromInfo(action.info)} : show\n          )\n      }\n  }\n  return state;\n}\n\nfunction getPosterUrlFromInfo(info) {\n  if (info.clearlogo) {\n    if (info.clearlogo instanceof Array) return info.clearlogo[0].url;\n    return info.clearlogo.url;\n  }\n  if (info.hdtvlogo) {\n    if (info.hdtvlogo instanceof Array) return info.hdtvlogo[0].url;\n    return info.hdtvlogo.url;\n  }\n  return null;\n}\n\nconst rootReducer = combineReducers({\n  shows: showsReducer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport * as actionCreators from \"../actions\"\n\nclass Table extends React.Component {\n  render() {\n    const {shows} = this.props;\n    const showsElems = shows && shows.info && shows.info.map(show =>\n      <tr key={show.id}>\n        <td>{show.id}</td>\n        <td>{show.title}</td>\n        <td>{show.year}</td>\n        <td>{show.posterUrl ? <img src={show.posterUrl} alt={show.title + \" poster\"}/> : \"\"}</td>\n      </tr>\n    );\n\n    return (\n      <div className=\"Table\">\n        <table>\n          <thead>\n            <tr>\n              <td>ID</td>\n              <td>Title</td>\n              <td>Year</td>\n              <td>Poster</td>\n            </tr>\n          </thead>\n          <tbody>{showsElems}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    shows: state.shows\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(actionCreators, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport '../App.css';\nimport Table from \"./Table\";\nimport * as actionCreators from \"../actions\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\n\nclass App extends React.Component {\n  componentWillMount() {\n    const {shows} = this.props;\n    if (shows && shows.infoFetched === false) {\n      this.props.fetchShows();\n    }\n  }\n\n  render() {\n    return <div className=\"App\">\n      <Table/>\n    </div>\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    shows: state.shows\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(actionCreators, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const initState = {\n  shows: {\n    info: [],\n    infoFetched: false\n  }\n};\n\nexport default initState;\n","import React from 'react';\nimport { render } from 'react-dom'\nimport { applyMiddleware, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/index'\nimport './index.css';\nimport App from './containers/App';\nimport initState from \"./initState\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk'\n// import * as serviceWorker from './serviceWorker';\n\n\nconst store = createStore(rootReducer, initState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}