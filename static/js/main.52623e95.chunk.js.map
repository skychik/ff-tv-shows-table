{"version":3,"sources":["actions/index.js","reducers/index.js","containers/Table.js","components/Paginator.js","components/LoadingPage.js","containers/App.js","initState.js","index.js"],"names":["TRAKT_CLIENT_KEY","FANART_PERSONAL_KEY","FANART_PROJECT_KEY","REQUEST_SHOWS","RECEIVE_SHOWS","REQUEST_POSTER_INFO","RECEIVE_POSTER_INFO","FAIL_POSTER_INFO","RECEIVE_PAGINATION_INFO","SET_PAGE","CHANGE_ITEMS_PER_PAGE","fetchShows","pageNumber","itemsPerPage","dispatch","requestShows","url","options","headers","Content-Type","trakt-api-version","trakt-api-key","fetch","then","response","pageCount","parseInt","get","itemCount","receivePaginationInfo","json","receiveShows","map","info","fetchPosterInfo","ids","tvdb","type","shows","posterId","requestPosterInfo","ok","failPosterInfo","receivePosterInfo","setPage","changeItemsPerPage","value","items","rootReducer","combineReducers","state","arguments","length","undefined","action","Object","objectSpread","infoNeedToBeChanged","showsDownloaded","console","log","id","show","title","year","posterUrl","tvposter","Array","seasonposter","Table","this","props","showsElems","react_default","a","createElement","key","href","target","src","className","alt","React","Component","connect","bindActionCreators","actionCreators","Paginator","currPage","onClick","totalPages","LoadingPage","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","event","_this2","infoLoaded","components_LoadingPage","containers_Table","extraInfo","onChange","components_Paginator","p","initState","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","render","es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.52623e95.chunk.js","sourcesContent":["import fetch from 'cross-fetch';\n\nconst TRAKT_CLIENT_KEY = \"1098aa9283a45930885916b98e046d43cd7301e4de4198c5e624aa39b5cd6972\";\nconst FANART_PERSONAL_KEY = \"313966685b1712ca5f9c4c15427da38d\";\nconst FANART_PROJECT_KEY = \"4a2226e35da3b653ed9d980ae3efb5f8\";\nexport const REQUEST_SHOWS = \"REQUEST_SHOWS\";\nexport const RECEIVE_SHOWS = \"RECEIVE_SHOWS\";\nexport const REQUEST_POSTER_INFO = \"REQUEST_POSTER_INFO\";\nexport const RECEIVE_POSTER_INFO = \"RECEIVE_POSTER_INFO\";\nexport const FAIL_POSTER_INFO = \"FAIL_POSTER_INFO\";\nexport const RECEIVE_PAGINATION_INFO = \"RECEIVE_PAGINATION_INFO\";\nexport const SET_PAGE = \"SET_PAGE\";\nexport const CHANGE_ITEMS_PER_PAGE = \"CHANGE_ITEMS_PER_PAGE\";\n\n\n// Getting all shows info\n\nexport function fetchShows(pageNumber, itemsPerPage) {\n  return dispatch => {\n    dispatch(requestShows());\n\n    const url = \"https://api.trakt.tv/shows/popular?page=\" + pageNumber + \"&limit=\" + itemsPerPage;\n    const options = {\n      headers: {\n        \"Content-Type\": 'application/json',\n        \"trakt-api-version\": '2',\n        \"trakt-api-key\": TRAKT_CLIENT_KEY\n      }\n    };\n    return fetch(url, options)\n      .then(response => {\n        const pageCount = parseInt(response.headers.get(\"X-Pagination-Page-Count\"));\n        const itemCount = parseInt(response.headers.get(\"X-Pagination-Item-Count\"));\n        dispatch(receivePaginationInfo(pageCount, itemCount));\n        return response.json()\n      })\n      .then(json => {\n        dispatch(receiveShows(json));\n        json.map(info => dispatch(fetchPosterInfo(info.ids.tvdb)));\n      });\n  }\n}\n\nexport function requestShows() {\n  return {\n    type: REQUEST_SHOWS\n  }\n}\n\nexport function receiveShows(shows) {\n  return {\n    type: RECEIVE_SHOWS,\n    shows: shows,\n  }\n}\n\nexport function receivePaginationInfo(pageCount, itemCount) {\n  return {\n    type: RECEIVE_PAGINATION_INFO,\n    pageCount: pageCount,\n    itemCount: itemCount,\n  }\n}\n\n\n// Getting poster info\n\nexport function fetchPosterInfo(posterId) {\n  return dispatch => {\n    dispatch(requestPosterInfo(posterId));\n\n    const url = \"https://webservice.fanart.tv/v3/tv/\" + posterId + \"?api_key=\" + FANART_PROJECT_KEY +\n      \"&client_key=\" + FANART_PERSONAL_KEY;\n    return fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          dispatch(failPosterInfo(posterId))\n        } else {\n          return response.json()\n        }\n      })\n      .then(json => dispatch(receivePosterInfo(json, posterId)));\n  }\n}\n\nexport function requestPosterInfo(posterId) {\n  return {\n    type: REQUEST_POSTER_INFO,\n    posterId: posterId\n  }\n}\n\nexport function receivePosterInfo(info, posterId) {\n  return {\n    type: RECEIVE_POSTER_INFO,\n    info: info,\n    posterId: posterId\n  }\n}\n\nexport function failPosterInfo(posterId) {\n  return {\n    type: FAIL_POSTER_INFO,\n    posterId: posterId\n  }\n}\n\n\n// Pagination\n\nexport function setPage(pageNumber) {\n  return {\n    type: SET_PAGE,\n    pageNumber: pageNumber,\n  }\n}\n\nexport function changeItemsPerPage(value) {\n  return {\n    type: CHANGE_ITEMS_PER_PAGE,\n    items: value\n  }\n}\n","import { combineReducers } from 'redux'\nimport {\n  CHANGE_ITEMS_PER_PAGE,\n  FAIL_POSTER_INFO,\n  RECEIVE_PAGINATION_INFO,\n  RECEIVE_POSTER_INFO,\n  RECEIVE_SHOWS,\n  REQUEST_SHOWS,\n  SET_NEXT_PAGE, SET_PAGE,\n  SET_PREVIOUS_PAGE\n} from \"../actions\";\n\nexport function showsReducer(state = {}, action) {\n  switch (action.type) {\n    case REQUEST_SHOWS:\n      return {\n        ...state,\n        infoNeedToBeChanged: false,\n        showsDownloaded: false\n      };\n    case RECEIVE_SHOWS:\n      console.log(action.shows);\n      let id = 1;\n      return {\n        ...state,\n        info: action.shows.map(show => ({\n          id: id++,\n          title: show.title,\n          year: show.year,\n          posterId: show.ids.tvdb\n        })),\n        showsDownloaded: true\n      };\n    case RECEIVE_PAGINATION_INFO:\n      return {\n        ...state,\n        pageCount: action.pageCount,\n        itemCount: action.itemCount\n      };\n    case RECEIVE_POSTER_INFO:\n      // TODO: normal algo\n      return {\n        ...state,\n        info: state.info.map(show =>\n            show.posterId === action.posterId ? {...show, posterUrl: getPosterUrlFromInfo(action.info)} : show\n          )\n      };\n    case FAIL_POSTER_INFO:\n      return {\n        ...state,\n        info: state.info.map(show =>\n          show.posterId === action.posterId ? {...show, posterUrl: \"no info\"} : show\n        )\n      };\n    case SET_PAGE:\n      return {\n        ...state,\n        pageNumber: (action.pageNumber < 1) || (action.pageNumber > state.pageCount) ? state.pageNumber :\n          action.pageNumber,\n        infoNeedToBeChanged: true\n      };\n    case CHANGE_ITEMS_PER_PAGE:\n      return {\n        ...state,\n        itemsPerPage: action.items,\n        pageNumber: 1,\n        infoNeedToBeChanged: true\n      }\n  }\n  return state;\n}\n\nfunction getPosterUrlFromInfo(info) {\n  if (info.tvposter) {\n    if (info.tvposter instanceof Array) return info.tvposter[0].url;\n    return info.tvposter.url;\n  }\n  if (info.seasonposter) {\n    if (info.seasonposter instanceof Array) return info.seasonposter[0].url;\n    return info.seasonposter.url;\n  }\n  return \"no posters\";\n}\n\nconst rootReducer = combineReducers({\n  shows: showsReducer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport * as actionCreators from \"../actions\"\n\nclass Table extends React.Component {\n  render() {\n    const {shows} = this.props;\n    const showsElems = shows && shows.info && shows.info.map(show =>\n      <tr key={show.id}>\n        <td>{show.id}</td>\n        <td>{show.title}</td>\n        <td>{show.year ? show.year : \"¯\\\\_(ツ)_/¯\"}</td>\n        <td>\n          {!show.posterUrl ? \"\" :\n            show.posterUrl === \"no posters\" ? <p>Only logo :(</p> :\n              show.posterUrl === \"no info\" ? <p>No posters ;(</p> :\n                <a href={show.posterUrl} target=\"_blank\">\n                  <img src={show.posterUrl} className=\"poster\" alt={show.title + \" poster\"}/>\n                </a>\n          }\n        </td>\n      </tr>\n    );\n\n    return (\n      <div className=\"Table\">\n        <table>\n          <thead>\n            <tr>\n              <td>№</td>\n              <td>Title</td>\n              <td>Year</td>\n              <td>Poster</td>\n            </tr>\n          </thead>\n          <tbody>{showsElems}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    shows: state.shows\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(actionCreators, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Paginator = (props) => {\n  // TODO: click time limit\n  return <ul className=\"pagination\">\n    {props.currPage <= 2 ? \"\" :\n      <li><a href=\"#\" onClick={() => props.setPage(1)} className=\"prev\">«</a></li>\n    }\n    {props.currPage === 1 ? \"\" :\n      <li><a href=\"#\" onClick={() => props.setPage(props.currPage - 1)}>{props.currPage - 1}</a></li>\n    }\n    <li><a className=\"active\">{props.currPage}</a></li>\n    {props.currPage === props.totalPages ? \"\" :\n      <li><a href=\"#\" onClick={() => props.setPage(props.currPage + 1)}>{props.currPage + 1}</a></li>\n    }\n    {props.currPage >= props.totalPages - 1 ? \"\" :\n      <li><a href=\"#\" onClick={() => props.setPage(props.totalPages)} className=\"next\">»</a></li>\n    }\n  </ul>;\n};\n\nPaginator.propTypes = {\n  setPage: PropTypes.func.isRequired,\n  currPage: PropTypes.number.isRequired,\n  totalPages: PropTypes.number.isRequired\n};\n\nexport default Paginator;\n","import React from \"react\";\n\nconst LoadingPage = () => {\n  return <div className=\"loader\" />\n};\n\nexport default LoadingPage;\n","import React from 'react';\nimport '../App.css';\nimport Table from \"./Table\";\nimport * as actionCreators from \"../actions\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport Paginator from \"../components/Paginator\";\nimport LoadingPage from \"../components/LoadingPage\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.changeItemsPerPage(event.target.value);\n  }\n\n  render() {\n    const {shows} = this.props;\n    const infoLoaded = shows.pageCount && shows.itemCount;\n\n    if (shows.infoNeedToBeChanged) {\n      this.props.fetchShows(shows.pageNumber, shows.itemsPerPage);\n      return <div className=\"App\">\n        <LoadingPage/>\n      </div>\n    }\n    if (!shows.showsDownloaded) {\n      return <div className=\"App\">\n        <LoadingPage/>\n      </div>\n    }\n    if (!infoLoaded) {\n      return <div className=\"App\">\n        <Table/>\n      </div>;\n    }\n    const extraInfo = <div>\n      <p>TV-shows displayed:\n        <select value={shows.itemsPerPage} onChange={this.handleChange}>\n          <option value={5}>5</option>\n          <option value={10}>10</option>\n          <option value={25}>25</option>\n          <option value={50}>50</option>\n        </select>. Page {shows.pageNumber} of {shows.pageCount}</p>\n      <p>Shows in total: {shows.itemCount}</p>\n    </div>;\n    return <div className=\"App\">\n      <Paginator setPage={(p) => this.props.setPage(p)} currPage={shows.pageNumber} totalPages={shows.pageCount}/>\n      <Table/>\n      {extraInfo}\n    </div>\n\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    shows: state.shows\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(actionCreators, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const initState = {\n  shows: {\n    info: [],\n    pageCount: null,\n    itemCount: null,\n    pageNumber: 1,\n    itemsPerPage: 10,\n    infoNeedToBeChanged: true,\n    showsDownloaded: false\n  }\n};\n\nexport default initState;\n","import React from 'react';\nimport { render } from 'react-dom'\nimport { applyMiddleware, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers/index'\nimport './index.css';\nimport App from './containers/App';\nimport initState from \"./initState\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk'\n// import * as serviceWorker from './serviceWorker';\n\n\nconst store = createStore(rootReducer, initState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}